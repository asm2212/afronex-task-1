{
  "version": 3,
  "sources": ["../../@radix-ui/react-toast/dist/packages/react/toast/src/index.ts", "../../@radix-ui/react-toast/dist/packages/react/toast/src/Toast.tsx"],
  "sourcesContent": ["export {\n  createToastScope,\n  //\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastAction,\n  ToastClose,\n  //\n  Provider,\n  Viewport,\n  Root,\n  Title,\n  Description,\n  Action,\n  Close,\n} from './Toast';\nexport type {\n  ToastProviderProps,\n  ToastViewportProps,\n  ToastProps,\n  ToastTitleProps,\n  ToastDescriptionProps,\n  ToastActionProps,\n  ToastCloseProps,\n} from './Toast';\n", "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { createContextScope } from '@radix-ui/react-context';\nimport * as DismissableLayer from '@radix-ui/react-dismissable-layer';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToastProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'ToastProvider';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<ToastElement>('Toast');\n\ntype SwipeDirection = 'up' | 'down' | 'left' | 'right';\ntype ToastProviderContextValue = {\n  label: string;\n  duration: number;\n  swipeDirection: SwipeDirection;\n  swipeThreshold: number;\n  toastCount: number;\n  viewport: ToastViewportElement | null;\n  onViewportChange(viewport: ToastViewportElement): void;\n  onToastAdd(): void;\n  onToastRemove(): void;\n  isFocusedToastEscapeKeyDownRef: React.MutableRefObject<boolean>;\n  isClosePausedRef: React.MutableRefObject<boolean>;\n};\n\ntype ScopedProps<P> = P & { __scopeToast?: Scope };\nconst [createToastContext, createToastScope] = createContextScope('Toast', [createCollectionScope]);\nconst [ToastProviderProvider, useToastProviderContext] =\n  createToastContext<ToastProviderContextValue>(PROVIDER_NAME);\n\ninterface ToastProviderProps {\n  children?: React.ReactNode;\n  /**\n   * An author-localized label for each toast. Used to help screen reader users\n   * associate the interruption with a toast.\n   * @defaultValue 'Notification'\n   */\n  label?: string;\n  /**\n   * Time in milliseconds that each toast should remain visible for.\n   * @defaultValue 5000\n   */\n  duration?: number;\n  /**\n   * Direction of pointer swipe that should close the toast.\n   * @defaultValue 'right'\n   */\n  swipeDirection?: SwipeDirection;\n  /**\n   * Distance in pixels that the swipe must pass before a close is triggered.\n   * @defaultValue 50\n   */\n  swipeThreshold?: number;\n}\n\nconst ToastProvider: React.FC<ToastProviderProps> = (props: ScopedProps<ToastProviderProps>) => {\n  const {\n    __scopeToast,\n    label = 'Notification',\n    duration = 5000,\n    swipeDirection = 'right',\n    swipeThreshold = 50,\n    children,\n  } = props;\n  const [viewport, setViewport] = React.useState<ToastViewportElement | null>(null);\n  const [toastCount, setToastCount] = React.useState(0);\n  const isFocusedToastEscapeKeyDownRef = React.useRef(false);\n  const isClosePausedRef = React.useRef(false);\n  return (\n    <Collection.Provider scope={__scopeToast}>\n      <ToastProviderProvider\n        scope={__scopeToast}\n        label={label}\n        duration={duration}\n        swipeDirection={swipeDirection}\n        swipeThreshold={swipeThreshold}\n        toastCount={toastCount}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        onToastAdd={React.useCallback(() => setToastCount((prevCount) => prevCount + 1), [])}\n        onToastRemove={React.useCallback(() => setToastCount((prevCount) => prevCount - 1), [])}\n        isFocusedToastEscapeKeyDownRef={isFocusedToastEscapeKeyDownRef}\n        isClosePausedRef={isClosePausedRef}\n      >\n        {children}\n      </ToastProviderProvider>\n    </Collection.Provider>\n  );\n};\n\nToastProvider.propTypes = {\n  label(props) {\n    if (props.label && typeof props.label === 'string' && !props.label.trim()) {\n      const error = `Invalid prop \\`label\\` supplied to \\`${PROVIDER_NAME}\\`. Expected non-empty \\`string\\`.`;\n      return new Error(error);\n    }\n    return null;\n  },\n};\n\nToastProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ToastViewport';\nconst VIEWPORT_DEFAULT_HOTKEY = ['F8'];\nconst VIEWPORT_PAUSE = 'toast.viewportPause';\nconst VIEWPORT_RESUME = 'toast.viewportResume';\n\ntype ToastViewportElement = React.ElementRef<typeof Primitive.ol>;\ntype PrimitiveOrderedListProps = Radix.ComponentPropsWithoutRef<typeof Primitive.ol>;\ninterface ToastViewportProps extends PrimitiveOrderedListProps {\n  /**\n   * The keys to use as the keyboard shortcut that will move focus to the toast viewport.\n   * @defaultValue ['F8']\n   */\n  hotkey?: string[];\n  /**\n   * An author-localized label for the toast viewport to provide context for screen reader users\n   * when navigating page landmarks. The available `{hotkey}` placeholder will be replaced for you.\n   * @defaultValue 'Notifications ({hotkey})'\n   */\n  label?: string;\n}\n\nconst ToastViewport = React.forwardRef<ToastViewportElement, ToastViewportProps>(\n  (props: ScopedProps<ToastViewportProps>, forwardedRef) => {\n    const {\n      __scopeToast,\n      hotkey = VIEWPORT_DEFAULT_HOTKEY,\n      label = 'Notifications ({hotkey})',\n      ...viewportProps\n    } = props;\n    const context = useToastProviderContext(VIEWPORT_NAME, __scopeToast);\n    const getItems = useCollection(__scopeToast);\n    const wrapperRef = React.useRef<HTMLDivElement>(null);\n    const headFocusProxyRef = React.useRef<FocusProxyElement>(null);\n    const tailFocusProxyRef = React.useRef<FocusProxyElement>(null);\n    const ref = React.useRef<ToastViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    const hotkeyLabel = hotkey.join('+').replace(/Key/g, '').replace(/Digit/g, '');\n    const hasToasts = context.toastCount > 0;\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        // we use `event.code` as it is consistent regardless of meta keys that were pressed.\n        // for example, `event.key` for `Control+Alt+t` is `†` and `t !== †`\n        const isHotkeyPressed = hotkey.every((key) => (event as any)[key] || event.code === key);\n        if (isHotkeyPressed) ref.current?.focus();\n      };\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [hotkey]);\n\n    React.useEffect(() => {\n      const wrapper = wrapperRef.current;\n      const viewport = ref.current;\n      if (hasToasts && wrapper && viewport) {\n        const handlePause = () => {\n          if (!context.isClosePausedRef.current) {\n            const pauseEvent = new CustomEvent(VIEWPORT_PAUSE);\n            viewport.dispatchEvent(pauseEvent);\n            context.isClosePausedRef.current = true;\n          }\n        };\n\n        const handleResume = () => {\n          if (context.isClosePausedRef.current) {\n            const resumeEvent = new CustomEvent(VIEWPORT_RESUME);\n            viewport.dispatchEvent(resumeEvent);\n            context.isClosePausedRef.current = false;\n          }\n        };\n\n        const handleFocusOutResume = (event: FocusEvent) => {\n          const isFocusMovingOutside = !wrapper.contains(event.relatedTarget as HTMLElement);\n          if (isFocusMovingOutside) handleResume();\n        };\n\n        const handlePointerLeaveResume = () => {\n          const isFocusInside = wrapper.contains(document.activeElement);\n          if (!isFocusInside) handleResume();\n        };\n\n        // Toasts are not in the viewport React tree so we need to bind DOM events\n        wrapper.addEventListener('focusin', handlePause);\n        wrapper.addEventListener('focusout', handleFocusOutResume);\n        wrapper.addEventListener('pointermove', handlePause);\n        wrapper.addEventListener('pointerleave', handlePointerLeaveResume);\n        window.addEventListener('blur', handlePause);\n        window.addEventListener('focus', handleResume);\n        return () => {\n          wrapper.removeEventListener('focusin', handlePause);\n          wrapper.removeEventListener('focusout', handleFocusOutResume);\n          wrapper.removeEventListener('pointermove', handlePause);\n          wrapper.removeEventListener('pointerleave', handlePointerLeaveResume);\n          window.removeEventListener('blur', handlePause);\n          window.removeEventListener('focus', handleResume);\n        };\n      }\n    }, [hasToasts, context.isClosePausedRef]);\n\n    const getSortedTabbableCandidates = React.useCallback(\n      ({ tabbingDirection }: { tabbingDirection: 'forwards' | 'backwards' }) => {\n        const toastItems = getItems();\n        const tabbableCandidates = toastItems.map((toastItem) => {\n          const toastNode = toastItem.ref.current!;\n          const toastTabbableCandidates = [toastNode, ...getTabbableCandidates(toastNode)];\n          return tabbingDirection === 'forwards'\n            ? toastTabbableCandidates\n            : toastTabbableCandidates.reverse();\n        });\n        return (\n          tabbingDirection === 'forwards' ? tabbableCandidates.reverse() : tabbableCandidates\n        ).flat();\n      },\n      [getItems]\n    );\n\n    React.useEffect(() => {\n      const viewport = ref.current;\n      // We programmatically manage tabbing as we are unable to influence\n      // the source order with portals, this allows us to reverse the\n      // tab order so that it runs from most recent toast to least\n      if (viewport) {\n        const handleKeyDown = (event: KeyboardEvent) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n\n          if (isTabKey) {\n            const focusedElement = document.activeElement;\n            const isTabbingBackwards = event.shiftKey;\n            const targetIsViewport = event.target === viewport;\n\n            // If we're back tabbing after jumping to the viewport then we simply\n            // proxy focus out to the preceding document\n            if (targetIsViewport && isTabbingBackwards) {\n              headFocusProxyRef.current?.focus();\n              return;\n            }\n\n            const tabbingDirection = isTabbingBackwards ? 'backwards' : 'forwards';\n            const sortedCandidates = getSortedTabbableCandidates({ tabbingDirection });\n            const index = sortedCandidates.findIndex((candidate) => candidate === focusedElement);\n            if (focusFirst(sortedCandidates.slice(index + 1))) {\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges so we\n              // proxy to the corresponding exit point and let the browser handle\n              // tab/shift+tab keypress and implicitly pass focus to the next valid element in the document\n              isTabbingBackwards\n                ? headFocusProxyRef.current?.focus()\n                : tailFocusProxyRef.current?.focus();\n            }\n          }\n        };\n\n        // Toasts are not in the viewport React tree so we need to bind DOM events\n        viewport.addEventListener('keydown', handleKeyDown);\n        return () => viewport.removeEventListener('keydown', handleKeyDown);\n      }\n    }, [getItems, getSortedTabbableCandidates]);\n\n    return (\n      <DismissableLayer.Branch\n        ref={wrapperRef}\n        role=\"region\"\n        aria-label={label.replace('{hotkey}', hotkeyLabel)}\n        // Ensure virtual cursor from landmarks menus triggers focus/blur for pause/resume\n        tabIndex={-1}\n        // incase list has size when empty (e.g. padding), we remove pointer events so\n        // it doesn't prevent interactions with page elements that it overlays\n        style={{ pointerEvents: hasToasts ? undefined : 'none' }}\n      >\n        {hasToasts && (\n          <FocusProxy\n            ref={headFocusProxyRef}\n            onFocusFromOutsideViewport={() => {\n              const tabbableCandidates = getSortedTabbableCandidates({\n                tabbingDirection: 'forwards',\n              });\n              focusFirst(tabbableCandidates);\n            }}\n          />\n        )}\n        {/**\n         * tabindex on the the list so that it can be focused when items are removed. we focus\n         * the list instead of the viewport so it announces number of items remaining.\n         */}\n        <Collection.Slot scope={__scopeToast}>\n          <Primitive.ol tabIndex={-1} {...viewportProps} ref={composedRefs} />\n        </Collection.Slot>\n        {hasToasts && (\n          <FocusProxy\n            ref={tailFocusProxyRef}\n            onFocusFromOutsideViewport={() => {\n              const tabbableCandidates = getSortedTabbableCandidates({\n                tabbingDirection: 'backwards',\n              });\n              focusFirst(tabbableCandidates);\n            }}\n          />\n        )}\n      </DismissableLayer.Branch>\n    );\n  }\n);\n\nToastViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_PROXY_NAME = 'ToastFocusProxy';\n\ntype FocusProxyElement = React.ElementRef<typeof VisuallyHidden>;\ntype VisuallyHiddenProps = Radix.ComponentPropsWithoutRef<typeof VisuallyHidden>;\ninterface FocusProxyProps extends VisuallyHiddenProps {\n  onFocusFromOutsideViewport(): void;\n}\n\nconst FocusProxy = React.forwardRef<FocusProxyElement, ScopedProps<FocusProxyProps>>(\n  (props, forwardedRef) => {\n    const { __scopeToast, onFocusFromOutsideViewport, ...proxyProps } = props;\n    const context = useToastProviderContext(FOCUS_PROXY_NAME, __scopeToast);\n\n    return (\n      <VisuallyHidden\n        aria-hidden\n        tabIndex={0}\n        {...proxyProps}\n        ref={forwardedRef}\n        // Avoid page scrolling when focus is on the focus proxy\n        style={{ position: 'fixed' }}\n        onFocus={(event) => {\n          const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n          const isFocusFromOutsideViewport = !context.viewport?.contains(prevFocusedElement);\n          if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();\n        }}\n      />\n    );\n  }\n);\n\nFocusProxy.displayName = FOCUS_PROXY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Toast\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOAST_NAME = 'Toast';\nconst TOAST_SWIPE_START = 'toast.swipeStart';\nconst TOAST_SWIPE_MOVE = 'toast.swipeMove';\nconst TOAST_SWIPE_CANCEL = 'toast.swipeCancel';\nconst TOAST_SWIPE_END = 'toast.swipeEnd';\n\ntype ToastElement = ToastImplElement;\ninterface ToastProps extends Omit<ToastImplProps, keyof ToastImplPrivateProps> {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst Toast = React.forwardRef<ToastElement, ToastProps>(\n  (props: ScopedProps<ToastProps>, forwardedRef) => {\n    const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props;\n    const [open = true, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n    return (\n      <Presence present={forceMount || open}>\n        <ToastImpl\n          open={open}\n          {...toastProps}\n          ref={forwardedRef}\n          onClose={() => setOpen(false)}\n          onPause={useCallbackRef(props.onPause)}\n          onResume={useCallbackRef(props.onResume)}\n          onSwipeStart={composeEventHandlers(props.onSwipeStart, (event) => {\n            event.currentTarget.setAttribute('data-swipe', 'start');\n          })}\n          onSwipeMove={composeEventHandlers(props.onSwipeMove, (event) => {\n            const { x, y } = event.detail.delta;\n            event.currentTarget.setAttribute('data-swipe', 'move');\n            event.currentTarget.style.setProperty('--radix-toast-swipe-move-x', `${x}px`);\n            event.currentTarget.style.setProperty('--radix-toast-swipe-move-y', `${y}px`);\n          })}\n          onSwipeCancel={composeEventHandlers(props.onSwipeCancel, (event) => {\n            event.currentTarget.setAttribute('data-swipe', 'cancel');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-x');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-y');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-end-x');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-end-y');\n          })}\n          onSwipeEnd={composeEventHandlers(props.onSwipeEnd, (event) => {\n            const { x, y } = event.detail.delta;\n            event.currentTarget.setAttribute('data-swipe', 'end');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-x');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-y');\n            event.currentTarget.style.setProperty('--radix-toast-swipe-end-x', `${x}px`);\n            event.currentTarget.style.setProperty('--radix-toast-swipe-end-y', `${y}px`);\n            setOpen(false);\n          })}\n        />\n      </Presence>\n    );\n  }\n);\n\nToast.displayName = TOAST_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype SwipeEvent = { currentTarget: EventTarget & ToastElement } & Omit<\n  CustomEvent<{ originalEvent: React.PointerEvent; delta: { x: number; y: number } }>,\n  'currentTarget'\n>;\n\nconst [ToastInteractiveProvider, useToastInteractiveContext] = createToastContext(TOAST_NAME, {\n  onClose() {},\n});\n\ntype ToastImplElement = React.ElementRef<typeof Primitive.li>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer.Root>;\ntype ToastImplPrivateProps = { open: boolean; onClose(): void };\ntype PrimitiveListItemProps = Radix.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface ToastImplProps extends ToastImplPrivateProps, PrimitiveListItemProps {\n  type?: 'foreground' | 'background';\n  /**\n   * Time in milliseconds that toast should remain visible for. Overrides value\n   * given to `ToastProvider`.\n   */\n  duration?: number;\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  onPause?(): void;\n  onResume?(): void;\n  onSwipeStart?(event: SwipeEvent): void;\n  onSwipeMove?(event: SwipeEvent): void;\n  onSwipeCancel?(event: SwipeEvent): void;\n  onSwipeEnd?(event: SwipeEvent): void;\n}\n\nconst ToastImpl = React.forwardRef<ToastImplElement, ToastImplProps>(\n  (props: ScopedProps<ToastImplProps>, forwardedRef) => {\n    const {\n      __scopeToast,\n      type = 'foreground',\n      duration: durationProp,\n      open,\n      onClose,\n      onEscapeKeyDown,\n      onPause,\n      onResume,\n      onSwipeStart,\n      onSwipeMove,\n      onSwipeCancel,\n      onSwipeEnd,\n      ...toastProps\n    } = props;\n    const context = useToastProviderContext(TOAST_NAME, __scopeToast);\n    const [node, setNode] = React.useState<ToastImplElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const pointerStartRef = React.useRef<{ x: number; y: number } | null>(null);\n    const swipeDeltaRef = React.useRef<{ x: number; y: number } | null>(null);\n    const duration = durationProp || context.duration;\n    const closeTimerStartTimeRef = React.useRef(0);\n    const closeTimerRemainingTimeRef = React.useRef(duration);\n    const closeTimerRef = React.useRef(0);\n    const { onToastAdd, onToastRemove } = context;\n    const handleClose = useCallbackRef(() => {\n      // focus viewport if focus is within toast to read the remaining toast\n      // count to SR users and ensure focus isn't lost\n      const isFocusInToast = node?.contains(document.activeElement);\n      if (isFocusInToast) context.viewport?.focus();\n      onClose();\n    });\n\n    const startTimer = React.useCallback(\n      (duration: number) => {\n        if (!duration || duration === Infinity) return;\n        window.clearTimeout(closeTimerRef.current);\n        closeTimerStartTimeRef.current = new Date().getTime();\n        closeTimerRef.current = window.setTimeout(handleClose, duration);\n      },\n      [handleClose]\n    );\n\n    React.useEffect(() => {\n      const viewport = context.viewport;\n      if (viewport) {\n        const handleResume = () => {\n          startTimer(closeTimerRemainingTimeRef.current);\n          onResume?.();\n        };\n        const handlePause = () => {\n          const elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;\n          closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;\n          window.clearTimeout(closeTimerRef.current);\n          onPause?.();\n        };\n        viewport.addEventListener(VIEWPORT_PAUSE, handlePause);\n        viewport.addEventListener(VIEWPORT_RESUME, handleResume);\n        return () => {\n          viewport.removeEventListener(VIEWPORT_PAUSE, handlePause);\n          viewport.removeEventListener(VIEWPORT_RESUME, handleResume);\n        };\n      }\n    }, [context.viewport, duration, onPause, onResume, startTimer]);\n\n    // start timer when toast opens or duration changes.\n    // we include `open` in deps because closed !== unmounted when animating\n    // so it could reopen before being completely unmounted\n    React.useEffect(() => {\n      if (open && !context.isClosePausedRef.current) startTimer(duration);\n    }, [open, duration, context.isClosePausedRef, startTimer]);\n\n    React.useEffect(() => {\n      onToastAdd();\n      return () => onToastRemove();\n    }, [onToastAdd, onToastRemove]);\n\n    const announceTextContent = React.useMemo(() => {\n      return node ? getAnnounceTextContent(node) : null;\n    }, [node]);\n\n    if (!context.viewport) return null;\n\n    return (\n      <>\n        {announceTextContent && (\n          <ToastAnnounce\n            __scopeToast={__scopeToast}\n            // Toasts are always role=status to avoid stuttering issues with role=alert in SRs.\n            role=\"status\"\n            aria-live={type === 'foreground' ? 'assertive' : 'polite'}\n            aria-atomic\n          >\n            {announceTextContent}\n          </ToastAnnounce>\n        )}\n\n        <ToastInteractiveProvider scope={__scopeToast} onClose={handleClose}>\n          {ReactDOM.createPortal(\n            <Collection.ItemSlot scope={__scopeToast}>\n              <DismissableLayer.Root\n                asChild\n                onEscapeKeyDown={composeEventHandlers(onEscapeKeyDown, () => {\n                  if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();\n                  context.isFocusedToastEscapeKeyDownRef.current = false;\n                })}\n              >\n                <Primitive.li\n                  // Ensure toasts are announced as status list or status when focused\n                  role=\"status\"\n                  aria-live=\"off\"\n                  aria-atomic\n                  tabIndex={0}\n                  data-state={open ? 'open' : 'closed'}\n                  data-swipe-direction={context.swipeDirection}\n                  {...toastProps}\n                  ref={composedRefs}\n                  style={{ userSelect: 'none', touchAction: 'none', ...props.style }}\n                  onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                    if (event.key !== 'Escape') return;\n                    onEscapeKeyDown?.(event.nativeEvent);\n                    if (!event.nativeEvent.defaultPrevented) {\n                      context.isFocusedToastEscapeKeyDownRef.current = true;\n                      handleClose();\n                    }\n                  })}\n                  onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                    if (event.button !== 0) return;\n                    pointerStartRef.current = { x: event.clientX, y: event.clientY };\n                  })}\n                  onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n                    if (!pointerStartRef.current) return;\n                    const x = event.clientX - pointerStartRef.current.x;\n                    const y = event.clientY - pointerStartRef.current.y;\n                    const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);\n                    const isHorizontalSwipe = ['left', 'right'].includes(context.swipeDirection);\n                    const clamp = ['left', 'up'].includes(context.swipeDirection)\n                      ? Math.min\n                      : Math.max;\n                    const clampedX = isHorizontalSwipe ? clamp(0, x) : 0;\n                    const clampedY = !isHorizontalSwipe ? clamp(0, y) : 0;\n                    const moveStartBuffer = event.pointerType === 'touch' ? 10 : 2;\n                    const delta = { x: clampedX, y: clampedY };\n                    const eventDetail = { originalEvent: event, delta };\n                    if (hasSwipeMoveStarted) {\n                      swipeDeltaRef.current = delta;\n                      handleAndDispatchCustomEvent(TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {\n                        discrete: false,\n                      });\n                    } else if (isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {\n                      swipeDeltaRef.current = delta;\n                      handleAndDispatchCustomEvent(TOAST_SWIPE_START, onSwipeStart, eventDetail, {\n                        discrete: false,\n                      });\n                      (event.target as HTMLElement).setPointerCapture(event.pointerId);\n                    } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer) {\n                      // User is swiping in wrong direction so we disable swipe gesture\n                      // for the current pointer down interaction\n                      pointerStartRef.current = null;\n                    }\n                  })}\n                  onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n                    const delta = swipeDeltaRef.current;\n                    const target = event.target as HTMLElement;\n                    if (target.hasPointerCapture(event.pointerId)) {\n                      target.releasePointerCapture(event.pointerId);\n                    }\n                    swipeDeltaRef.current = null;\n                    pointerStartRef.current = null;\n                    if (delta) {\n                      const toast = event.currentTarget;\n                      const eventDetail = { originalEvent: event, delta };\n                      if (\n                        isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)\n                      ) {\n                        handleAndDispatchCustomEvent(TOAST_SWIPE_END, onSwipeEnd, eventDetail, {\n                          discrete: true,\n                        });\n                      } else {\n                        handleAndDispatchCustomEvent(\n                          TOAST_SWIPE_CANCEL,\n                          onSwipeCancel,\n                          eventDetail,\n                          {\n                            discrete: true,\n                          }\n                        );\n                      }\n                      // Prevent click event from triggering on items within the toast when\n                      // pointer up is part of a swipe gesture\n                      toast.addEventListener('click', (event) => event.preventDefault(), {\n                        once: true,\n                      });\n                    }\n                  })}\n                />\n              </DismissableLayer.Root>\n            </Collection.ItemSlot>,\n            context.viewport\n          )}\n        </ToastInteractiveProvider>\n      </>\n    );\n  }\n);\n\nToastImpl.propTypes = {\n  type(props) {\n    if (props.type && !['foreground', 'background'].includes(props.type)) {\n      const error = `Invalid prop \\`type\\` supplied to \\`${TOAST_NAME}\\`. Expected \\`foreground | background\\`.`;\n      return new Error(error);\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface ToastAnnounceProps\n  extends Omit<React.ComponentPropsWithoutRef<'div'>, 'children'>,\n    ScopedProps<{ children: string[] }> {}\n\nconst ToastAnnounce: React.FC<ToastAnnounceProps> = (props: ScopedProps<ToastAnnounceProps>) => {\n  const { __scopeToast, children, ...announceProps } = props;\n  const context = useToastProviderContext(TOAST_NAME, __scopeToast);\n  const [renderAnnounceText, setRenderAnnounceText] = React.useState(false);\n  const [isAnnounced, setIsAnnounced] = React.useState(false);\n\n  // render text content in the next frame to ensure toast is announced in NVDA\n  useNextFrame(() => setRenderAnnounceText(true));\n\n  // cleanup after announcing\n  React.useEffect(() => {\n    const timer = window.setTimeout(() => setIsAnnounced(true), 1000);\n    return () => window.clearTimeout(timer);\n  }, []);\n\n  return isAnnounced ? null : (\n    <Portal asChild>\n      <VisuallyHidden {...announceProps}>\n        {renderAnnounceText && (\n          <>\n            {context.label} {children}\n          </>\n        )}\n      </VisuallyHidden>\n    </Portal>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ToastTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'ToastTitle';\n\ntype ToastTitleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToastTitleProps extends PrimitiveDivProps {}\n\nconst ToastTitle = React.forwardRef<ToastTitleElement, ToastTitleProps>(\n  (props: ScopedProps<ToastTitleProps>, forwardedRef) => {\n    const { __scopeToast, ...titleProps } = props;\n    return <Primitive.div {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nToastTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'ToastDescription';\n\ntype ToastDescriptionElement = React.ElementRef<typeof Primitive.div>;\ninterface ToastDescriptionProps extends PrimitiveDivProps {}\n\nconst ToastDescription = React.forwardRef<ToastDescriptionElement, ToastDescriptionProps>(\n  (props: ScopedProps<ToastDescriptionProps>, forwardedRef) => {\n    const { __scopeToast, ...descriptionProps } = props;\n    return <Primitive.div {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nToastDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'ToastAction';\n\ntype ToastActionElement = ToastCloseElement;\ninterface ToastActionProps extends ToastCloseProps {\n  /**\n   * A short description for an alternate way to carry out the action. For screen reader users\n   * who will not be able to navigate to the button easily/quickly.\n   * @example <ToastAction altText=\"Goto account settings to upgrade\">Upgrade</ToastAction>\n   * @example <ToastAction altText=\"Undo (Alt+U)\">Undo</ToastAction>\n   */\n  altText: string;\n}\n\nconst ToastAction = React.forwardRef<ToastActionElement, ToastActionProps>(\n  (props: ScopedProps<ToastActionProps>, forwardedRef) => {\n    const { altText, ...actionProps } = props;\n    if (!altText) return null;\n    return (\n      <ToastAnnounceExclude altText={altText} asChild>\n        <ToastClose {...actionProps} ref={forwardedRef} />\n      </ToastAnnounceExclude>\n    );\n  }\n);\n\nToastAction.propTypes = {\n  altText(props) {\n    if (!props.altText) {\n      return new Error(`Missing prop \\`altText\\` expected on \\`${ACTION_NAME}\\``);\n    }\n    return null;\n  },\n};\n\nToastAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'ToastClose';\n\ntype ToastCloseElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToastCloseProps extends PrimitiveButtonProps {}\n\nconst ToastClose = React.forwardRef<ToastCloseElement, ToastCloseProps>(\n  (props: ScopedProps<ToastCloseProps>, forwardedRef) => {\n    const { __scopeToast, ...closeProps } = props;\n    const interactiveContext = useToastInteractiveContext(CLOSE_NAME, __scopeToast);\n\n    return (\n      <ToastAnnounceExclude asChild>\n        <Primitive.button\n          type=\"button\"\n          {...closeProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(props.onClick, interactiveContext.onClose)}\n        />\n      </ToastAnnounceExclude>\n    );\n  }\n);\n\nToastClose.displayName = CLOSE_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype ToastAnnounceExcludeElement = React.ElementRef<typeof Primitive.div>;\ninterface ToastAnnounceExcludeProps extends PrimitiveDivProps {\n  altText?: string;\n}\n\nconst ToastAnnounceExclude = React.forwardRef<\n  ToastAnnounceExcludeElement,\n  ToastAnnounceExcludeProps\n>((props: ScopedProps<ToastAnnounceExcludeProps>, forwardedRef) => {\n  const { __scopeToast, altText, ...announceExcludeProps } = props;\n\n  return (\n    <Primitive.div\n      data-radix-toast-announce-exclude=\"\"\n      data-radix-toast-announce-alt={altText || undefined}\n      {...announceExcludeProps}\n      ref={forwardedRef}\n    />\n  );\n});\n\nfunction getAnnounceTextContent(container: HTMLElement) {\n  const textContent: string[] = [];\n  const childNodes = Array.from(container.childNodes);\n\n  childNodes.forEach((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);\n    if (isHTMLElement(node)) {\n      const isHidden = node.ariaHidden || node.hidden || node.style.display === 'none';\n      const isExcluded = node.dataset.radixToastAnnounceExclude === '';\n\n      if (!isHidden) {\n        if (isExcluded) {\n          const altText = node.dataset.radixToastAnnounceAlt;\n          if (altText) textContent.push(altText);\n        } else {\n          textContent.push(...getAnnounceTextContent(node));\n        }\n      }\n    }\n  });\n\n  // We return a collection of text rather than a single concatenated string.\n  // This allows SR VO to naturally pause break between nodes while announcing.\n  return textContent;\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction handleAndDispatchCustomEvent<\n  E extends CustomEvent,\n  ReactEvent extends React.SyntheticEvent\n>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: ReactEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const currentTarget = detail.originalEvent.currentTarget as HTMLElement;\n  const event = new CustomEvent(name, { bubbles: true, cancelable: true, detail });\n  if (handler) currentTarget.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(currentTarget, event);\n  } else {\n    currentTarget.dispatchEvent(event);\n  }\n}\n\nconst isDeltaInDirection = (\n  delta: { x: number; y: number },\n  direction: SwipeDirection,\n  threshold = 0\n) => {\n  const deltaX = Math.abs(delta.x);\n  const deltaY = Math.abs(delta.y);\n  const isDeltaX = deltaX > deltaY;\n  if (direction === 'left' || direction === 'right') {\n    return isDeltaX && deltaX > threshold;\n  } else {\n    return !isDeltaX && deltaY > threshold;\n  }\n};\n\nfunction useNextFrame(callback = () => {}) {\n  const fn = useCallbackRef(callback);\n  useLayoutEffect(() => {\n    let raf1 = 0;\n    let raf2 = 0;\n    raf1 = window.requestAnimationFrame(() => (raf2 = window.requestAnimationFrame(fn)));\n    return () => {\n      window.cancelAnimationFrame(raf1);\n      window.cancelAnimationFrame(raf2);\n    };\n  }, [fn]);\n}\n\nfunction isHTMLElement(node: any): node is HTMLElement {\n  return node.nodeType === node.ELEMENT_NODE;\n}\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nconst Provider = ToastProvider;\nconst Viewport = ToastViewport;\nconst Root = Toast;\nconst Title = ToastTitle;\nconst Description = ToastDescription;\nconst Action = ToastAction;\nconst Close = ToastClose;\n\nexport {\n  createToastScope,\n  //\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastAction,\n  ToastClose,\n  //\n  Provider,\n  Viewport,\n  Root,\n  Title,\n  Description,\n  Action,\n  Close,\n};\nexport type {\n  ToastProviderProps,\n  ToastViewportProps,\n  ToastProps,\n  ToastTitleProps,\n  ToastDescriptionProps,\n  ToastActionProps,\n  ToastCloseProps,\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA,IAAMA,sCAAgB;AAEtB,IAAM,CAACC,kCAAYC,qCAAeC,2CAA5B,IAAqDC,0CAA+B,OAAf;AAkB3E,IAAM,CAACC,0CAAoBC,yCAArB,IAAyCC,yCAAmB,SAAS;EAACJ;CAAX;AACjE,IAAM,CAACK,6CAAuBC,6CAAxB,IACJJ,yCAA8CL,mCAA5B;AA2BpB,IAAMU,2CAA+CC,CAAAA,UAA2C;AAC9F,QAAM,EAAA,cAAA,QAEI,gBAFJ,WAGO,KAHP,iBAIa,SAJb,iBAKa,IALb,SAMJC,IACED;AACJ,QAAM,CAACE,UAAUC,WAAX,QAA0BC,aAAAA,UAA4C,IAA5C;AAChC,QAAM,CAACC,YAAYC,aAAb,QAA8BF,aAAAA,UAAe,CAAf;AACpC,QAAMG,qCAAiCH,aAAAA,QAAa,KAAb;AACvC,QAAMI,uBAAmBJ,aAAAA,QAAa,KAAb;AACzB,aACE,aAAAK,eAAC,iCAAW,UADd;IACuB,OAAOC;SAC1B,aAAAD,eAAC,6CADH;IAEI,OAAOC;IACP;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkBP;IAClB,gBAAYC,aAAAA;MAAkB,MAAME;QAAeK,CAAAA,cAAcA,YAAY;MAA5B;MAAgC,CAAA;IAArE;IACZ,mBAAeP,aAAAA;MAAkB,MAAME;QAAeK,CAAAA,cAAcA,YAAY;MAA5B;MAAgC,CAAA;IAArE;IACf;IACA;KAECV,QAdH,CADF;;AAqBJF,yCAAca,YAAY;EACxBC,MAAMb,OAAO;AACX,QAAIA,MAAMa,SAAS,OAAOb,MAAMa,UAAU,YAAY,CAACb,MAAMa,MAAMC,KAAZ,GAAoB;AACzE,YAAMC,QAAS,wCAAuC1B,mCAAc;AACpE,aAAO,IAAI2B,MAAMD,KAAV;;AAET,WAAO;;;AAIX,OAAA,OAAA,0CAAA;EAAA,aAAA;CAAA;AAMA,IAAME,sCAAgB;AACtB,IAAMC,gDAA0B;EAAC;;AACjC,IAAMC,uCAAiB;AACvB,IAAMC,wCAAkB;AAkBxB,IAAMC,gDAAgBjB,aAAAA,YACpB,CAACJ,OAAwCsB,iBAAiB;AACxD,QAAM,EAAA,cAAA,SAEKJ,+CAFL,QAGI,4BACR,GAAGK,cAAH,IACEvB;AACJ,QAAMwB,UAAU1B,8CAAwBmB,qCAAeP,YAAhB;AACvC,QAAMe,WAAWlC,oCAAcmB,YAAD;AAC9B,QAAMgB,iBAAatB,aAAAA,QAA6B,IAA7B;AACnB,QAAMuB,wBAAoBvB,aAAAA,QAAgC,IAAhC;AAC1B,QAAMwB,wBAAoBxB,aAAAA,QAAgC,IAAhC;AAC1B,QAAMyB,UAAMzB,aAAAA,QAAmC,IAAnC;AACZ,QAAM0B,eAAeC,0CAAgBT,cAAcO,KAAKL,QAAQQ,gBAA5B;AACpC,QAAMC,cAAcC,OAAOC,KAAK,GAAZ,EAAiBC,QAAjB,QAAiC,EAAjC,EAAqCA,QAArC,UAAuD,EAAvD;AACpB,QAAMC,YAAYb,QAAQnB,aAAa;AAEvCD,mBAAAA,WAAgB,MAAM;AACpB,UAAMkC,gBAAiBC,CAAAA,UAAyB;AAAA,UAAA;AAG9C,YAAMC,kBAAkBN,OAAOO;QAAOC,CAAAA,QAASH,MAAcG,GAAf,KAAuBH,MAAMI,SAASD;MAA5D;AACxB,UAAIF;AAAiB,SAAA,eAAAX,IAAIe,aAAJ,QAAA,iBAAA,UAAA,aAAaC,MAAb;;AAEvBC,aAASC,iBAAiB,WAAWT,aAArC;AACA,WAAO,MAAMQ,SAASE,oBAAoB,WAAWV,aAAxC;KACZ;IAACJ;GATJ;AAWA9B,mBAAAA,WAAgB,MAAM;AACpB,UAAM6C,UAAUvB,WAAWkB;AAC3B,UAAM1C,WAAW2B,IAAIe;AACrB,QAAIP,aAAaY,WAAW/C,UAAU;AACpC,YAAMgD,cAAc,MAAM;AACxB,YAAI,CAAC1B,QAAQhB,iBAAiBoC,SAAS;AACrC,gBAAMO,aAAa,IAAIC,YAAYjC,oCAAhB;AACnBjB,mBAASmD,cAAcF,UAAvB;AACA3B,kBAAQhB,iBAAiBoC,UAAU;;;AAIvC,YAAMU,eAAe,MAAM;AACzB,YAAI9B,QAAQhB,iBAAiBoC,SAAS;AACpC,gBAAMW,cAAc,IAAIH,YAAYhC,qCAAhB;AACpBlB,mBAASmD,cAAcE,WAAvB;AACA/B,kBAAQhB,iBAAiBoC,UAAU;;;AAIvC,YAAMY,uBAAwBjB,CAAAA,UAAsB;AAClD,cAAMkB,uBAAuB,CAACR,QAAQS,SAASnB,MAAMoB,aAAvB;AAC9B,YAAIF;AAAsBH,uBAAY;;AAGxC,YAAMM,2BAA2B,MAAM;AACrC,cAAMC,gBAAgBZ,QAAQS,SAASZ,SAASgB,aAA1B;AACtB,YAAI,CAACD;AAAeP,uBAAY;;AAIlCL,cAAQF,iBAAiB,WAAWG,WAApC;AACAD,cAAQF,iBAAiB,YAAYS,oBAArC;AACAP,cAAQF,iBAAiB,eAAeG,WAAxC;AACAD,cAAQF,iBAAiB,gBAAgBa,wBAAzC;AACAG,aAAOhB,iBAAiB,QAAQG,WAAhC;AACAa,aAAOhB,iBAAiB,SAASO,YAAjC;AACA,aAAO,MAAM;AACXL,gBAAQD,oBAAoB,WAAWE,WAAvC;AACAD,gBAAQD,oBAAoB,YAAYQ,oBAAxC;AACAP,gBAAQD,oBAAoB,eAAeE,WAA3C;AACAD,gBAAQD,oBAAoB,gBAAgBY,wBAA5C;AACAG,eAAOf,oBAAoB,QAAQE,WAAnC;AACAa,eAAOf,oBAAoB,SAASM,YAApC;;;KAGH;IAACjB;IAAWb,QAAQhB;GA9CvB;AAgDA,QAAMwD,kCAA8B5D,aAAAA,aAClC,CAAC,EAAA,iBAAE6D,MAAuE;AACxE,UAAMC,aAAazC,SAAQ;AAC3B,UAAM0C,qBAAqBD,WAAWE,IAAKC,CAAAA,cAAc;AACvD,YAAMC,YAAYD,UAAUxC,IAAIe;AAChC,YAAM2B,0BAA0B;QAACD;WAAcE,4CAAsBF,SAAD;;AACpE,aAAOL,qBAAqB,aACxBM,0BACAA,wBAAwBE,QAAxB;KALqB;AAO3B,YACER,qBAAqB,aAAaE,mBAAmBM,QAAnB,IAA+BN,oBACjEO,KAFK;KAIT;IAACjD;GAdiC;AAiBpCrB,mBAAAA,WAAgB,MAAM;AACpB,UAAMF,WAAW2B,IAAIe;AAIrB,QAAI1C,UAAU;AACZ,YAAMoC,gBAAiBC,CAAAA,UAAyB;AAC9C,cAAMoC,YAAYpC,MAAMqC,UAAUrC,MAAMsC,WAAWtC,MAAMuC;AACzD,cAAMC,WAAWxC,MAAMG,QAAQ,SAAS,CAACiC;AAEzC,YAAII,UAAU;AACZ,gBAAMC,iBAAiBlC,SAASgB;AAChC,gBAAMmB,qBAAqB1C,MAAM2C;AACjC,gBAAMC,mBAAmB5C,MAAM6C,WAAWlF;AAI1C,cAAIiF,oBAAoBF,oBAAoB;AAAA,gBAAA;AAC1C,aAAA,wBAAAtD,kBAAkBiB,aAAlB,QAAA,0BAAA,UAAA,sBAA2BC,MAA3B;AACA;;AAGF,gBAAMoB,mBAAmBgB,qBAAqB,cAAc;AAC5D,gBAAMI,mBAAmBrB,4BAA4B;;WAAD;AACpD,gBAAMsB,QAAQD,iBAAiBE;YAAWC,CAAAA,cAAcA,cAAcR;UAAxD;AACd,cAAIS,iCAAWJ,iBAAiBK,MAAMJ,QAAQ,CAA/B,CAAD;AACZ/C,kBAAMoD,eAAN;eACK;AAAA,gBAAA,wBAAA;AAILV,kCAAkB,yBACdtD,kBAAkBiB,aADJ,QAAA,2BAAA,UACd,uBAA2BC,MAA3B,KADc,wBAEdjB,kBAAkBgB,aAFJ,QAAA,0BAAA,UAEd,sBAA2BC,MAA3B;;;;AAMV3C,eAAS6C,iBAAiB,WAAWT,aAArC;AACA,aAAO,MAAMpC,SAAS8C,oBAAoB,WAAWV,aAAxC;;KAEd;IAACb;IAAUuC;GA1Cd;AA4CA,aACE,aAAAvD,eAAC,2CADH;IAEI,KAAKiB;IACL,MAAK;IACL,cAAYb,MAAMuB,QAAQ,YAAYH,WAA1B;IAEZ,UAAU;IAGV,OAAO;MAAE2D,eAAevD,YAAYwD,SAAY;;KAE/CxD,iBACC,aAAA5B,eAAC,kCAXL;IAYM,KAAKkB;IACL,4BAA4B,MAAM;AAChC,YAAMwC,qBAAqBH,4BAA4B;QACrDC,kBAAkB;OADkC;AAGtDwB,uCAAWtB,kBAAD;;GANd,OAcF,aAAA1D,eAAC,iCAAW,MAdV;IAce,OAAOC;SACtB,aAAAD,eAAC,0CAAU,IADb,SAAA;IACgB,UAAU;KAAQc,eAAhC;IAA+C,KAAKO;GAApD,CAAA,CADF,GAGCO,iBACC,aAAA5B,eAAC,kCAHD;IAIE,KAAKmB;IACL,4BAA4B,MAAM;AAChC,YAAMuC,qBAAqBH,4BAA4B;QACrDC,kBAAkB;OADkC;AAGtDwB,uCAAWtB,kBAAD;;GANd,CA7BJ;CA3IgB;AAuLtB,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAIA,IAAM2B,yCAAmB;AAQzB,IAAMC,uCAAa3F,aAAAA,YACjB,CAACJ,OAAOsB,iBAAiB;AACvB,QAAM,EAAA,cAAA,4BAA4C,GAAG0E,WAAH,IAAkBhG;AACpE,QAAMwB,UAAU1B,8CAAwBgG,wCAAkBpF,YAAnB;AAEvC,aACE,aAAAD,eAAC,2CADH,SAAA;IAEI,eAAA;IACA,UAAU;KACNuF,YAHN;IAIE,KAAK1E;IAEL,OAAO;MAAE2E,UAAU;;IACnB,SAAU1D,CAAAA,UAAU;AAAA,UAAA;AAClB,YAAM2D,qBAAqB3D,MAAMoB;AACjC,YAAMwC,6BAA6B,GAAA,oBAAC3E,QAAQtB,cAAT,QAAA,sBAAA,UAAC,kBAAkBwD,SAASwC,kBAA3B;AACpC,UAAIC;AAA4BC,mCAA0B;;GAV9D,CAAA;CANa;AAuBnB,OAAA,OAAA,kCAAA;EAAA,aAAA;CAAA;AAMA,IAAMC,mCAAa;AACnB,IAAMC,0CAAoB;AAC1B,IAAMC,yCAAmB;AACzB,IAAMC,2CAAqB;AAC3B,IAAMC,wCAAkB;AAcxB,IAAMC,gDAAQtG,aAAAA,YACZ,CAACJ,OAAgCsB,iBAAiB;AAChD,QAAM,EAAA,YAAcqF,MAAMC,UAApB,aAAA,cAAyD,GAAGC,WAAH,IAAkB7G;AACjF,QAAM,CAAC2G,OAAO,MAAMG,OAAd,IAAyBC,yCAAqB;IAClDC,MAAMJ;IACNK,aAAaC;IACbC,UAAUC;GAHuC;AAKnD,aACE,aAAA3G,eAAC,2CADH;IACY,SAAS4G,cAAcV;SAC/B,aAAAlG,eAAC,iCADH,SAAA;IAEI;KACIoG,YAFN;IAGE,KAAKvF;IACL,SAAS,MAAMwF,QAAQ,KAAD;IACtB,SAASQ,0CAAetH,MAAMuH,OAAP;IACvB,UAAUD,0CAAetH,MAAMwH,QAAP;IACxB,cAAcC,0CAAqBzH,MAAM0H,cAAenF,CAAAA,UAAU;AAChEA,YAAMoF,cAAcC,aAAa,cAAc,OAA/C;KADgC;IAGlC,aAAaH,0CAAqBzH,MAAM6H,aAActF,CAAAA,UAAU;AAC9D,YAAM,EAAA,GAAA,EAAKuF,IAAMvF,MAAMwF,OAAOC;AAC9BzF,YAAMoF,cAAcC,aAAa,cAAc,MAA/C;AACArF,YAAMoF,cAAcM,MAAMC,YAAY,8BAA+B,GAAEC,CAAE,IAAzE;AACA5F,YAAMoF,cAAcM,MAAMC,YAAY,8BAA+B,GAAEJ,CAAE,IAAzE;KAJ+B;IAMjC,eAAeL,0CAAqBzH,MAAMoI,eAAgB7F,CAAAA,UAAU;AAClEA,YAAMoF,cAAcC,aAAa,cAAc,QAA/C;AACArF,YAAMoF,cAAcM,MAAMI,eAAe,4BAAzC;AACA9F,YAAMoF,cAAcM,MAAMI,eAAe,4BAAzC;AACA9F,YAAMoF,cAAcM,MAAMI,eAAe,2BAAzC;AACA9F,YAAMoF,cAAcM,MAAMI,eAAe,2BAAzC;KALiC;IAOnC,YAAYZ,0CAAqBzH,MAAMsI,YAAa/F,CAAAA,UAAU;AAC5D,YAAM,EAAA,GAAA,EAAKuF,IAAMvF,MAAMwF,OAAOC;AAC9BzF,YAAMoF,cAAcC,aAAa,cAAc,KAA/C;AACArF,YAAMoF,cAAcM,MAAMI,eAAe,4BAAzC;AACA9F,YAAMoF,cAAcM,MAAMI,eAAe,4BAAzC;AACA9F,YAAMoF,cAAcM,MAAMC,YAAY,6BAA8B,GAAEC,CAAE,IAAxE;AACA5F,YAAMoF,cAAcM,MAAMC,YAAY,6BAA8B,GAAEJ,CAAE,IAAxE;AACAhB,cAAQ,KAAD;KAPuB;GAvBlC,CAAA,CADF;CATQ;AAgDd,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AASA,IAAM,CAACyB,gDAA0BC,gDAA3B,IAAyD9I,yCAAmB2G,kCAAY;EAC5FoC,UAAU;EAAA;CADqE;AAwBjF,IAAMC,sCAAYtI,aAAAA,YAChB,CAACJ,OAAoCsB,iBAAiB;AACpD,QAAM,EAAA,cAAA,OAEG,cACPqH,UAAUC,cAHN,MAAA,SAAA,iBAAA,SAAA,UAAA,cAAA,aAAA,eAAA,YAaJ,GAAG/B,WAAH,IACE7G;AACJ,QAAMwB,UAAU1B,8CAAwBuG,kCAAY3F,YAAb;AACvC,QAAM,CAACmI,OAAMC,OAAP,QAAkB1I,aAAAA,UAAwC,IAAxC;AACxB,QAAM0B,eAAeC;IAAgBT;IAAeuH,CAAAA,SAASC,QAAQD,IAAD;EAAhC;AACpC,QAAME,sBAAkB3I,aAAAA,QAA8C,IAA9C;AACxB,QAAM4I,oBAAgB5I,aAAAA,QAA8C,IAA9C;AACtB,QAAMuI,YAAWC,gBAAgBpH,QAAQmH;AACzC,QAAMM,6BAAyB7I,aAAAA,QAAa,CAAb;AAC/B,QAAM8I,iCAA6B9I,aAAAA,QAAauI,SAAb;AACnC,QAAMQ,oBAAgB/I,aAAAA,QAAa,CAAb;AACtB,QAAM,EAAA,YAAA,cAAcgJ,IAAkB5H;AACtC,QAAM6H,cAAc/B,0CAAe,MAAM;AAAA,QAAA;AAGvC,UAAMgC,iBAAiBT,UAAH,QAAGA,UAAH,SAAA,SAAGA,MAAMnF,SAASZ,SAASgB,aAAxB;AACvB,QAAIwF;AAAgB,OAAA,qBAAA9H,QAAQtB,cAAR,QAAA,uBAAA,UAAA,mBAAkB2C,MAAlB;AACpB4F,YAAO;GALyB;AAQlC,QAAMc,iBAAanJ,aAAAA,aAChBuI,CAAAA,aAAqB;AACpB,QAAI,CAACA,YAAYA,aAAaa;AAAU;AACxCzF,WAAO0F,aAAaN,cAAcvG,OAAlC;AACAqG,2BAAuBrG,WAAU,oBAAI8G,KAAJ,GAAWC,QAAX;AACjCR,kBAAcvG,UAAUmB,OAAO6F,WAAWP,aAAaV,QAA/B;KAE1B;IAACU;GAPgB;AAUnBjJ,mBAAAA,WAAgB,MAAM;AACpB,UAAMF,WAAWsB,QAAQtB;AACzB,QAAIA,UAAU;AACZ,YAAMoD,eAAe,MAAM;AACzBiG,mBAAWL,2BAA2BtG,OAA5B;AACV4E,qBAAQ,QAARA,aAAQ,UAARA,SAAQ;;AAEV,YAAMtE,cAAc,MAAM;AACxB,cAAM2G,eAAc,oBAAIH,KAAJ,GAAWC,QAAX,IAAuBV,uBAAuBrG;AAClEsG,mCAA2BtG,UAAUsG,2BAA2BtG,UAAUiH;AAC1E9F,eAAO0F,aAAaN,cAAcvG,OAAlC;AACA2E,oBAAO,QAAPA,YAAO,UAAPA,QAAO;;AAETrH,eAAS6C,iBAAiB5B,sCAAgB+B,WAA1C;AACAhD,eAAS6C,iBAAiB3B,uCAAiBkC,YAA3C;AACA,aAAO,MAAM;AACXpD,iBAAS8C,oBAAoB7B,sCAAgB+B,WAA7C;AACAhD,iBAAS8C,oBAAoB5B,uCAAiBkC,YAA9C;;;KAGH;IAAC9B,QAAQtB;IAAUyI;IAAUpB;IAASC;IAAU+B;GApBnD;AAyBAnJ,mBAAAA,WAAgB,MAAM;AACpB,QAAIuG,QAAQ,CAACnF,QAAQhB,iBAAiBoC;AAAS2G,iBAAWZ,SAAD;KACxD;IAAChC;IAAMgC;IAAUnH,QAAQhB;IAAkB+I;GAF9C;AAIAnJ,mBAAAA,WAAgB,MAAM;AACpB0J,eAAU;AACV,WAAO,MAAMV,cAAa;KACzB;IAACU;IAAYV;GAHhB;AAKA,QAAMW,0BAAsB3J,aAAAA,SAAc,MAAM;AAC9C,WAAOyI,QAAOmB,6CAAuBnB,KAAD,IAAS;KAC5C;IAACA;GAFwB;AAI5B,MAAI,CAACrH,QAAQtB;AAAU,WAAO;AAE9B,aACE,aAAAO,eAAA,aAAAwJ,UAAA,MACGF,2BACC,aAAAtJ,eAAC,qCAHP;IAIQ;IAEA,MAAK;IACL,aAAWyJ,SAAS,eAAe,cAAc;IACjD,eAAA;KAECH,mBAPH,OAWF,aAAAtJ,eAAC,gDAXC;IAWwB,OAAOC;IAAc,SAAS2I;SACrDc,iBAAAA,kBACC,aAAA1J,eAAC,iCAAW,UAFhB;IAEyB,OAAOC;SAC1B,aAAAD,eAAC,2CADH;IAEI,SAAO;IACP,iBAAiBgH,0CAAqB2C,iBAAiB,MAAM;AAC3D,UAAI,CAAC5I,QAAQjB,+BAA+BqC;AAASyG,oBAAW;AAChE7H,cAAQjB,+BAA+BqC,UAAU;KAFd;SAKrC,aAAAnC,eAAC,0CAAU,IAPb,SAAA;;IASI,MAAK;IACL,aAAU;IACV,eAAA;IACA,UAAU;IACV,cAAYkG,OAAO,SAAS;IAC5B,wBAAsBnF,QAAQ6I;KAC1BxD,YARN;IASE,KAAK/E;IACL,OAAO;MAAEwI,YAAY;MAAQC,aAAa;MAAQ,GAAGvK,MAAMiI;;IAC3D,WAAWR,0CAAqBzH,MAAMwK,WAAYjI,CAAAA,UAAU;AAC1D,UAAIA,MAAMG,QAAQ;AAAU;AAC5B0H,0BAAe,QAAfA,oBAAe,UAAfA,gBAAkB7H,MAAMkI,WAAT;AACf,UAAI,CAAClI,MAAMkI,YAAYC,kBAAkB;AACvClJ,gBAAQjB,+BAA+BqC,UAAU;AACjDyG,oBAAW;;KALgB;IAQ/B,eAAe5B,0CAAqBzH,MAAM2K,eAAgBpI,CAAAA,UAAU;AAClE,UAAIA,MAAMqI,WAAW;AAAG;AACxB7B,sBAAgBnG,UAAU;QAAEuF,GAAG5F,MAAMsI;QAAS/C,GAAGvF,MAAMuI;;KAFtB;IAInC,eAAerD,0CAAqBzH,MAAM+K,eAAgBxI,CAAAA,UAAU;AAClE,UAAI,CAACwG,gBAAgBnG;AAAS;AAC9B,YAAMuF,IAAI5F,MAAMsI,UAAU9B,gBAAgBnG,QAAQuF;AAClD,YAAML,IAAIvF,MAAMuI,UAAU/B,gBAAgBnG,QAAQkF;AAClD,YAAMkD,sBAAsBC,QAAQjC,cAAcpG,OAAf;AACnC,YAAMsI,oBAAoB;QAAC;QAAQ;QAASC,SAAS3J,QAAQ6I,cAAnC;AAC1B,YAAMe,QAAQ;QAAC;QAAQ;QAAMD,SAAS3J,QAAQ6I,cAAhC,IACVgB,KAAKC,MACLD,KAAKE;AACT,YAAMC,WAAWN,oBAAoBE,MAAM,GAAGjD,CAAJ,IAAS;AACnD,YAAMsD,WAAW,CAACP,oBAAoBE,MAAM,GAAGtD,CAAJ,IAAS;AACpD,YAAM4D,kBAAkBnJ,MAAMoJ,gBAAgB,UAAU,KAAK;AAC7D,YAAM3D,QAAQ;QAAEG,GAAGqD;QAAU1D,GAAG2D;;AAChC,YAAMG,cAAc;QAAEC,eAAetJ;;;AACrC,UAAIyI,qBAAqB;AACvBhC,sBAAcpG,UAAUoF;AACxB8D,2DAA6BvF,wCAAkBsB,aAAa+D,aAAa;UACvEG,UAAU;SADgB;iBAGnBC,yCAAmBhE,OAAOxG,QAAQ6I,gBAAgBqB,eAAhC,GAAkD;AAC7E1C,sBAAcpG,UAAUoF;AACxB8D,2DAA6BxF,yCAAmBoB,cAAckE,aAAa;UACzEG,UAAU;SADgB;AAG3BxJ,cAAM6C,OAAuB6G,kBAAkB1J,MAAM2J,SAAtD;iBACSb,KAAKc,IAAIhE,CAAT,IAAcuD,mBAAmBL,KAAKc,IAAIrE,CAAT,IAAc4D;AAGxD3C,wBAAgBnG,UAAU;KA5BK;IA+BnC,aAAa6E,0CAAqBzH,MAAMoM,aAAc7J,CAAAA,WAAU;AAC9D,YAAMyF,QAAQgB,cAAcpG;AAC5B,YAAMwC,SAAS7C,OAAM6C;AACrB,UAAIA,OAAOiH,kBAAkB9J,OAAM2J,SAA/B;AACF9G,eAAOkH,sBAAsB/J,OAAM2J,SAAnC;AAEFlD,oBAAcpG,UAAU;AACxBmG,sBAAgBnG,UAAU;AAC1B,UAAIoF,OAAO;AACT,cAAMuE,QAAQhK,OAAMoF;AACpB,cAAMiE,cAAc;UAAEC,eAAetJ;;;AACrC,YACEyJ,yCAAmBhE,OAAOxG,QAAQ6I,gBAAgB7I,QAAQgL,cAAxC;AAElBV,6DAA6BrF,uCAAiB6B,YAAYsD,aAAa;YACrEG,UAAU;WADgB;;AAI5BD,6DACEtF,0CACA4B,eACAwD,aACA;YACEG,UAAU;WALc;AAW9BQ,cAAMxJ;UAAiB;UAAUR,CAAAA,UAAUA,MAAMoD,eAAN;UAAwB;YACjE8G,MAAM;;QADR;;KA7B6B;GAtDnC,CAAA,CAPF,CADF,GAmGAjL,QAAQtB,QApGT,CADH,CAbF;CAtFY;AAgNlBwI,gCAAU9H,YAAY;EACpBsJ,KAAKlK,OAAO;AACV,QAAIA,MAAMkK,QAAQ,CAAC;MAAC;MAAc;MAAciB,SAASnL,MAAMkK,IAA5C,GAAmD;AACpE,YAAMnJ,QAAS,uCAAsCsF,gCAAW;AAChE,aAAO,IAAIrF,MAAMD,KAAV;;AAET,WAAO;;;AAUX,IAAM2L,sCAA+C1M,CAAAA,UAA2C;AAC9F,QAAM,EAAA,cAAA,UAA0B,GAAG2M,cAAH,IAAqB3M;AACrD,QAAMwB,UAAU1B,8CAAwBuG,kCAAY3F,YAAb;AACvC,QAAM,CAACkM,oBAAoBC,qBAArB,QAA8CzM,aAAAA,UAAe,KAAf;AACpD,QAAM,CAAC0M,aAAaC,cAAd,QAAgC3M,aAAAA,UAAe,KAAf;AAGtC4M;IAAa,MAAMH,sBAAsB,IAAD;EAA5B;AAGZzM,mBAAAA,WAAgB,MAAM;AACpB,UAAM6M,QAAQlJ,OAAO6F;MAAW,MAAMmD,eAAe,IAAD;MAAQ;IAA9C;AACd,WAAO,MAAMhJ,OAAO0F,aAAawD,KAApB;KACZ,CAAA,CAHH;AAKA,SAAOH,cAAc,WACnB,aAAArM,eAAC,2CADH;IACU,SAAA;SACN,aAAAA,eAAC,2CAAmBkM,eACjBC,0BACC,aAAAnM,eAAA,aAAAwJ,UAAA,MACGzI,QAAQX,OADX,KACmBZ,QADnB,CAFJ,CADF;;AAgBJ,IAAMiN,mCAAa;AAMnB,IAAMC,+CAAa/M,aAAAA,YACjB,CAACJ,OAAqCsB,iBAAiB;AACrD,QAAM,EAAA,cAAgB,GAAG8L,WAAH,IAAkBpN;AACxC,aAAO,aAAAS,eAAC,0CAAU,KAAX,SAAA,CAAA,GAAmB2M,YAA1B;IAAsC,KAAK9L;GAApC,CAAA;CAHQ;AAOnB,OAAA,OAAA,0CAAA;EAAA,aAAA;CAAA;AAMA,IAAM+L,yCAAmB;AAKzB,IAAMC,gDAAmBlN,aAAAA,YACvB,CAACJ,OAA2CsB,iBAAiB;AAC3D,QAAM,EAAA,cAAgB,GAAGiM,iBAAH,IAAwBvN;AAC9C,aAAO,aAAAS,eAAC,0CAAU,KAAX,SAAA,CAAA,GAAmB8M,kBAA1B;IAA4C,KAAKjM;GAA1C,CAAA;CAHc;AAOzB,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAMA,IAAMkM,oCAAc;AAapB,IAAMC,gDAAcrN,aAAAA,YAClB,CAACJ,OAAsCsB,iBAAiB;AACtD,QAAM,EAAA,SAAW,GAAGoM,YAAH,IAAmB1N;AACpC,MAAI,CAAC2N;AAAS,WAAO;AACrB,aACE,aAAAlN,eAAC,4CADH;IACwB;IAAkB,SAAA;SACtC,aAAAA,eAAC,2CAAD,SAAA,CAAA,GAAgBiN,aADlB;IAC+B,KAAKpM;GAAlC,CAAA,CADF;CALc;AAYpBmM,0CAAY7M,YAAY;EACtB+M,QAAQ3N,OAAO;AACb,QAAI,CAACA,MAAM2N;AACT,aAAO,IAAI3M,MAAO,0CAAyCwM,iCAAY,IAAhE;AAET,WAAO;;;AAIX,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAMA,IAAMI,mCAAa;AAMnB,IAAMC,gDAAazN,aAAAA,YACjB,CAACJ,OAAqCsB,iBAAiB;AACrD,QAAM,EAAA,cAAgB,GAAGwM,WAAH,IAAkB9N;AACxC,QAAM+N,qBAAqBvF,iDAA2BoF,kCAAYlN,YAAb;AAErD,aACE,aAAAD,eAAC,4CADH;IACwB,SAAA;SACpB,aAAAA,eAAC,0CAAU,QADb,SAAA;IAEI,MAAK;KACDqN,YAFN;IAGE,KAAKxM;IACL,SAASmG,0CAAqBzH,MAAMgO,SAASD,mBAAmBtF,OAAnC;GAJ/B,CAAA,CADF;CANa;AAkBnB,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AASA,IAAMwF,iDAAuB7N,aAAAA,YAG3B,CAACJ,OAA+CsB,iBAAiB;AACjE,QAAM,EAAA,cAAA,SAAyB,GAAG4M,qBAAH,IAA4BlO;AAE3D,aACE,aAAAS,eAAC,0CAAU,KADb,SAAA;IAEI,qCAAkC;IAClC,iCAA+BkN,WAAW9H;KACtCqI,sBAHN;IAIE,KAAK5M;GAJP,CAAA;CAPyB;AAgB7B,SAAS0I,6CAAuBmE,WAAwB;AACtD,QAAMC,cAAwB,CAAA;AAC9B,QAAMC,aAAaC,MAAMC,KAAKJ,UAAUE,UAArB;AAEnBA,aAAWG,QAAS3F,CAAAA,SAAS;AAC3B,QAAIA,KAAK4F,aAAa5F,KAAK6F,aAAa7F,KAAKuF;AAAaA,kBAAYO,KAAK9F,KAAKuF,WAAtB;AAC1D,QAAIQ,oCAAc/F,IAAD,GAAQ;AACvB,YAAMgG,WAAWhG,KAAKiG,cAAcjG,KAAKkG,UAAUlG,KAAKZ,MAAM+G,YAAY;AAC1E,YAAMC,aAAapG,KAAKqG,QAAQC,8BAA8B;AAE9D,UAAI,CAACN,UAAL;AACE,YAAII,YAAY;AACd,gBAAMtB,UAAU9E,KAAKqG,QAAQE;AAC7B,cAAIzB;AAASS,wBAAYO,KAAKhB,OAAjB;;AAEbS,sBAAYO,KAAZ,GAAoB3E,6CAAuBnB,IAAD,CAA1C;;;GAXR;AAmBA,SAAOuF;;AAKT,SAAStC,mDAIPuD,MACAC,SACAvH,QACA,EAAA,SAAEgE,GACF;AACA,QAAMpE,gBAAgBI,OAAO8D,cAAclE;AAC3C,QAAMpF,QAAQ,IAAIa,YAAYiM,MAAM;IAAEE,SAAS;IAAMC,YAAY;;GAAnD;AACd,MAAIF;AAAS3H,kBAAc5E,iBAAiBsM,MAAMC,SAA0B;MAAE7C,MAAM;KAAvE;AAEb,MAAIV;AACF0D,8CAA4B9H,eAAepF,KAAhB;;AAE3BoF,kBAActE,cAAcd,KAA5B;;AAIJ,IAAMyJ,2CAAqB,CACzBhE,OACA0H,WACAC,YAAY,MACT;AACH,QAAMC,SAASvE,KAAKc,IAAInE,MAAMG,CAAf;AACf,QAAM0H,SAASxE,KAAKc,IAAInE,MAAMF,CAAf;AACf,QAAMgI,WAAWF,SAASC;AAC1B,MAAIH,cAAc,UAAUA,cAAc;AACxC,WAAOI,YAAYF,SAASD;;AAE5B,WAAO,CAACG,YAAYD,SAASF;;AAIjC,SAAS3C,mCAAa+C,WAAW,MAAM;AAAA,GAAI;AACzC,QAAMC,KAAK1I,0CAAeyI,QAAD;AACzBE,4CAAgB,MAAM;AACpB,QAAIC,OAAO;AACX,QAAIC,OAAO;AACXD,WAAOnM,OAAOqM;MAAsB,MAAOD,OAAOpM,OAAOqM,sBAAsBJ,EAA7B;IAA3C;AACP,WAAO,MAAM;AACXjM,aAAOsM,qBAAqBH,IAA5B;AACAnM,aAAOsM,qBAAqBF,IAA5B;;KAED;IAACH;GARW;;AAWjB,SAASpB,oCAAc/F,MAAgC;AACrD,SAAOA,KAAK4F,aAAa5F,KAAKyH;;AAahC,SAAS9L,4CAAsB2J,WAAwB;AACrD,QAAMoC,QAAuB,CAAA;AAC7B,QAAMC,SAAS1N,SAAS2N,iBAAiBtC,WAAWuC,WAAWC,cAAc;IAC3EC,YAAa/H,CAAAA,SAAc;AACzB,YAAMgI,gBAAgBhI,KAAKiI,YAAY,WAAWjI,KAAKqB,SAAS;AAChE,UAAIrB,KAAKkI,YAAYlI,KAAKkG,UAAU8B;AAAe,eAAOH,WAAWM;AAIrE,aAAOnI,KAAKoI,YAAY,IAAIP,WAAWQ,gBAAgBR,WAAWM;;GAPvD;AAUf,SAAOR,OAAOW,SAAP;AAAmBZ,UAAM5B,KAAK6B,OAAOY,WAAlB;AAG1B,SAAOb;;AAGT,SAAS9K,iCAAW4L,YAA2B;AAC7C,QAAMC,2BAA2BxO,SAASgB;AAC1C,SAAOuN,WAAWE,KAAM/L,CAAAA,cAAc;AAEpC,QAAIA,cAAc8L;AAA0B,aAAO;AACnD9L,cAAU3C,MAAV;AACA,WAAOC,SAASgB,kBAAkBwN;GAJ7B;;AAQT,IAAME,4CAAWzR;AACjB,IAAM0R,2CAAWpQ;AACjB,IAAMqQ,4CAAOhL;AACb,IAAMiL,4CAAQxE;AACd,IAAMyE,4CAActE;AACpB,IAAMuE,4CAASpE;AACf,IAAMqE,4CAAQjE;",
  "names": ["PROVIDER_NAME", "Collection", "useCollection", "createCollectionScope", "createCollection", "createToastContext", "createToastScope", "createContextScope", "ToastProviderProvider", "useToastProviderContext", "ToastProvider", "props", "children", "viewport", "setViewport", "React", "toastCount", "setToastCount", "isFocusedToastEscapeKeyDownRef", "isClosePausedRef", "$eyrYI$createElement", "__scopeToast", "prevCount", "propTypes", "label", "trim", "error", "Error", "VIEWPORT_NAME", "VIEWPORT_DEFAULT_HOTKEY", "VIEWPORT_PAUSE", "VIEWPORT_RESUME", "ToastViewport", "forwardedRef", "viewportProps", "context", "getItems", "wrapperRef", "headFocusProxyRef", "tailFocusProxyRef", "ref", "composedRefs", "useComposedRefs", "onViewportChange", "hotkeyLabel", "hotkey", "join", "replace", "hasToasts", "handleKeyDown", "event", "isHotkeyPressed", "every", "key", "code", "current", "focus", "document", "addEventListener", "removeEventListener", "wrapper", "handlePause", "pauseEvent", "CustomEvent", "dispatchEvent", "handleResume", "resumeEvent", "handleFocusOutResume", "isFocusMovingOutside", "contains", "relatedTarget", "handlePointerLeaveResume", "isFocusInside", "activeElement", "window", "getSortedTabbableCandidates", "tabbingDirection", "toastItems", "tabbableCandidates", "map", "toastItem", "toastNode", "toastTabbableCandidates", "getTabbableCandidates", "reverse", "flat", "isMetaKey", "altKey", "ctrlKey", "metaKey", "isTabKey", "focusedElement", "isTabbingBackwards", "shiftKey", "targetIsViewport", "target", "sortedCandidates", "index", "findIndex", "candidate", "focusFirst", "slice", "preventDefault", "pointerEvents", "undefined", "FOCUS_PROXY_NAME", "FocusProxy", "proxyProps", "position", "prevFocusedElement", "isFocusFromOutsideViewport", "onFocusFromOutsideViewport", "TOAST_NAME", "TOAST_SWIPE_START", "TOAST_SWIPE_MOVE", "TOAST_SWIPE_CANCEL", "TOAST_SWIPE_END", "Toast", "open", "openProp", "toastProps", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "forceMount", "useCallbackRef", "onPause", "onResume", "composeEventHandlers", "onSwipeStart", "currentTarget", "setAttribute", "onSwipeMove", "y", "detail", "delta", "style", "setProperty", "x", "onSwipeCancel", "removeProperty", "onSwipeEnd", "ToastInteractiveProvider", "useToastInteractiveContext", "onClose", "ToastImpl", "duration", "durationProp", "node", "setNode", "pointerStartRef", "swipeDeltaRef", "closeTimerStartTimeRef", "closeTimerRemainingTimeRef", "closeTimerRef", "onToastRemove", "handleClose", "isFocusInToast", "startTimer", "Infinity", "clearTimeout", "Date", "getTime", "setTimeout", "elapsedTime", "onToastAdd", "announceTextContent", "getAnnounceTextContent", "$eyrYI$Fragment", "type", "ReactDOM", "onEscapeKeyDown", "swipeDirection", "userSelect", "touchAction", "onKeyDown", "nativeEvent", "defaultPrevented", "onPointerDown", "button", "clientX", "clientY", "onPointerMove", "hasSwipeMoveStarted", "Boolean", "isHorizontalSwipe", "includes", "clamp", "Math", "min", "max", "clampedX", "clampedY", "moveStartBuffer", "pointerType", "eventDetail", "originalEvent", "handleAndDispatchCustomEvent", "discrete", "isDeltaInDirection", "setPointerCapture", "pointerId", "abs", "onPointerUp", "hasPointerCapture", "releasePointerCapture", "toast", "swipeThreshold", "once", "ToastAnnounce", "announceProps", "renderAnnounceText", "setRenderAnnounceText", "isAnnounced", "setIsAnnounced", "useNextFrame", "timer", "TITLE_NAME", "ToastTitle", "titleProps", "DESCRIPTION_NAME", "ToastDescription", "descriptionProps", "ACTION_NAME", "ToastAction", "actionProps", "altText", "CLOSE_NAME", "ToastClose", "closeProps", "interactiveContext", "onClick", "ToastAnnounceExclude", "announceExcludeProps", "container", "textContent", "childNodes", "Array", "from", "forEach", "nodeType", "TEXT_NODE", "push", "isHTMLElement", "isHidden", "ariaHidden", "hidden", "display", "isExcluded", "dataset", "radixToastAnnounceExclude", "radixToastAnnounceAlt", "name", "handler", "bubbles", "cancelable", "dispatchDiscreteCustomEvent", "direction", "threshold", "deltaX", "deltaY", "isDeltaX", "callback", "fn", "useLayoutEffect", "raf1", "raf2", "requestAnimationFrame", "cancelAnimationFrame", "ELEMENT_NODE", "nodes", "walker", "createTreeWalker", "NodeFilter", "SHOW_ELEMENT", "acceptNode", "isHiddenInput", "tagName", "disabled", "FILTER_SKIP", "tabIndex", "FILTER_ACCEPT", "nextNode", "currentNode", "candidates", "previouslyFocusedElement", "some", "Provider", "Viewport", "Root", "Title", "Description", "Action", "Close"]
}
